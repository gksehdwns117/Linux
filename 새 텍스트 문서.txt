#1 사례 연구
[애플리케이션 아키텍처]
이 회사의 주요 애플리케이션은 VB.NET으로 작성된 로직을 사용하는 ASP.NET 웹 양식을 기반으로 하는 단일 단일 퇴직 기금 관리 시스템입니다. 응용 프로그램의 일부 새 섹션은 C#으로 작성되었습니다. 응용 프로그램의 변형은 개별 고객을 위해 생성됩니다. 현재 응용 프로그램의 코드 기반에는 80개 이상의 라이브 코드 분기가 있습니다. 응용 프로그램은 Microsoft Visual Studio를 사용하여 개발되었습니다. 소스 코드는 본사의 TFS(Team Foundation Server)에 저장됩니다. 지점은 TFS 프록시 서버를 사용하여 소스 코드에 액세스합니다.
[아키텍처 문제]
- Litware는 고객을 위한 새로운 코드 작성에 중점을 둡니다. 기존 코드를 리팩토링하거나 제거하기 위한 리소스가 제공되지 않습니다. 종속성이 개별 개발자에게 명확하지 않기 때문에 코드 기반을 변경하는 데 오랜 시간이 걸립니다.
- 코드의 병합 작업은 종종 몇 달이 걸리고 많은 개발자가 참여합니다. 코드 병합은 자주 찾고 해결하기 어려운 버그를 도입합니다.
- 고객들은 퇴직 기금 관리 시스템의 소유 비용이 지속적으로 증가한다고 보고합니다. 관련 없는 코드를 병합해야 하기 때문에 사소한 코드 변경에도 비용이 많이 듭니다.
- 고객은 버그 보고가 지나치게 복잡하다고 보고합니다.
[계획된 변경]
- Litware는 투자 계획을 위한 새로운 애플리케이션 제품군을 개발할 계획입니다. 투자 계획 응용 프로그램은 기존 퇴직 기금 관리 시스템과 약간만 통합하면 됩니다.
- 투자 계획 애플리케이션 제품군에는 다중 계층 웹 애플리케이션 1개와 iOS 모바일 애플리케이션 2개가 포함됩니다. 직원들은 하나의 모바일 애플리케이션을 사용할 것입니다. 다른 하나는 고객이 사용합니다.
- Litware는 보다 민첩한 개발 방법론으로 이동할 계획입니다. 공유 코드는 일련의 패키지로 추출됩니다.
- Litware는 내부 클라우드 변환 프로세스를 시작했으며 적절할 때마다 클라우드 기반 서비스를 사용할 계획입니다.
- Litware는 항상 고객 버그 보고서를 기다리기보다 사전에 오류를 감지하기를 원합니다.
[기술 요구 사항]
* 회사의 투자 계획(investment planning) 애플리케이션 제품군은 다음 요구 사항을 충족해야 합니다. 
- 방화벽을 통해 들어오는 새로운 연결을 최소화해야 합니다.
- Developers라는 그룹의 구성원은 패키지를 설치할 수 있어야 합니다.
- 모든 권한 할당에 대해 최소 권한 원칙을 사용해야 합니다.
- 새로운 기능 개발을 지원하는 분기 전략을 사용해야 합니다.
- 팀 리더라는 그룹의 구성원은 새 패키지를 만들고 패키지 피드의 권한을 편집할 수 있어야 합니다.
- Visual Studio App Center는 사용 중인 모바일 애플리케이션 충돌 및 장치 유형의 보고를 중앙 집중화하는 데 사용해야 합니다.
- 기본적으로 모든 릴리스는 60일 동안 보관해야 하는 프로덕션 릴리스를 제외하고 30일 동안 사용할 수 있어야 합니다.
- 코드 품질과 릴리스 품질이 중요합니다. 
- 릴리스 동안 활성 버그가 릴리스에 대해 기록된 경우 배포가 단계 사이에 진행되어서는 안 됩니다.
- 모바일 어플리케이션은 기존 퇴직금 관리 시스템의 주가 서비스를 호출할 수 있어야 하고 시스템이 업그레이드될 때까지 서비스는 HTTPS를 통한 기본 인증만 지원합니다.
- 테스트 서버에 필요한 운영 체제 구성은 매주 변경됩니다. Azure Automation 상태 구성을 사용하여 서버를 주기적으로 만들고 확인할 때 각 테스트 서버의 운영 체제가 동일한 방식으로 구성되도록 해야 합니다.
[현재 기술 문제]
- 테스트 서버는 처음 배포될 때 올바르게 구성되지만 시간이 지남에 따라 구성 드리프트가 발생합니다. Azure Automation 상태 구성이 구성을 수정하지 못합니다.
- Azure Automation 상태 구성 노드는 다음 명령을 사용하여 등록됩니다.
 


#2 사례 연구
[개요]
Contoso,Ltd.는 시카고에 본사가 있는 제조회사입니다.
[기존 환경]
Contoso,Ltd.는 Azure DevOps 원칙을 구현하여 IT 개발 및 운영 프로세스를 개선할 계획입니다. Contoso,Ltd.는 Azure 구독권을 가지고 있으며 Azure DevOps 조직을 만듭니다.
Azure DevOps 조직은 다음을 포함한다.
- 도커 확장(Dokcer Extension)
- Windows Server 2016을 실행하는 10개의 Azure 가상 시스템이 포함된 'Pool7'이라는 배포 풀
- Azure Automation 계정이 포함되어 있는 Azure 구독

# 요구사항
[계획된 변경사항]
Contoso는 다음 표와 같이 Azure DevOps에서 프로젝트를 만들 계획입니다.
 
* Project1은 증가 빌드 및 타사 SDK 구성 요소를 지원합니다.
* Project2는 자동 빌드 정책을 사용합니다. Team2라는 이름의 소규모 개발자 팀이 프로젝트의 변경 사항에 대해 독립적으로 작업할 것입니다. Team2 구성원은 Project2에 대한 권한이 없습니다.
* Project3는 SonarQube와 통합될 예정입니다.
* Project4는 도커 이미지를 생성하고 이미지를 ACR로 푸시하는 빌드 파이프라인에 대한 지원을 제공할 것입니다. Project4는 기존 Docker 파일을 사용합니다.
* Project5에는 Azure Reposit의 Git 저장소가 포함되며, 저장소의 /folder1 내의 변경 사항을 제외한 모든 
변경에 대응하여 빌드를 시작하는 지속적인 통합 트리거가 포함됩니다.
* Project6는 빌드 및 배포 파이프라인에 대한 지원을 제공할 것이다. 현재 활성 소프트웨어 버그를 나타내
는 작업 항목 수가 0인 경우에만 배포가 허용됩니다.
* Project7에는 Group7이라는 이름의 대상 배포 그룹이 포함되어 Pool7에 매핑됩니다. Project7은 Azure Automation State Configuration을 사용하여 Group7의 원하는 컴퓨터 상태를 유지합니다.
[기술 요구 사항]
Contoso는 다음과 같은 기술적 요구사항을 식별합니다.
- Project1용 빌드 에이전트를 구현합니다.
- 가능하면 Azure 리소스를 사용하십시오.
- 사용되지 않는 기술을 사용하지 않도록 합니다.

다음을 수행하는 Project2의 코드 흐름 전략 구현:
- Team2가 Project2에 대한 Pull 요청을 제출하도록 설정합니다.
- Team2가 Project2 사본의 변경사항에 대해 독립적으로 작업할 수 있도록 합니다.
- Project2의 사본에 대해 Team2가 수행한 모든 중간 변경사항이 Project2의 빌드 정책에 정의된 변경사항과 동일한 제한사항을 적용되도록 합니다.

가능할 때마다 자동화를 구현하고 관리 작업을 최소화합니다.
계획된 변경사항을 기반으로 Project3, Project5, Project6, Project7을 구현합니다.
Project4를 구현하고 도커 이미지를 Azure Container Registry에 푸시하는 프로젝트를 구성합니다.
